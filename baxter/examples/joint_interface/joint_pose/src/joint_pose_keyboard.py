#!/usr/bin/env python
import termios
import tty
import sys

import roslib
roslib.load_manifest('joint_pose')
import rospy
import enable_robot

from Mapper import Mapper
from JointPositionBaxterController import JointPositionBaxterController

class KeyboardMapper(Mapper):
  """ class that listens to keypresses and sends associated robot joint commands """

  def __init__(self, controller):
    super(KeyboardMapper, self).__init__(controller)
    self.mode = 0
    self.done = False
    jcf = self.createCommandFunction

    # these deltas should be some pct of the range from the URDF
    # it would be nice if the whole mapping could be autogenerated from the URDF
    self.bindings = {
      #     mode 0: all left     mode 1: all right     mode 2: top l&r       mode 3: bottom l&r
      'a': [jcf('left_s0',+0.1), jcf('right_s0',+0.1), jcf('right_s0',+0.1), jcf('right_e1',+0.1)],
      'f': [jcf('left_s0',-0.1), jcf('right_s0',-0.1), jcf('right_s0',-0.1), jcf('right_e1',-0.1)],
      's': [jcf('left_s1',+0.1), jcf('right_s1',+0.1), jcf('right_s1',+0.1), jcf('right_w0',+0.1)],
      'd': [jcf('left_s1',-0.1), jcf('right_s1',-0.1), jcf('right_s1',-0.1), jcf('right_w0',-0.1)],
      'w': [jcf('left_w0',+0.1), jcf('right_w0',+0.1), jcf('right_e0',+0.1), jcf('right_w1',+0.1)],
      'e': [jcf('left_w0',-0.1), jcf('right_w0',-0.1), jcf('right_e0',-0.1), jcf('right_w1',-0.1)],

      'h': [jcf('left_e0',+0.1), jcf('right_e0',+0.1), jcf('left_s0', +0.1), jcf('left_e1', +0.1)],
      'l': [jcf('left_e0',-0.1), jcf('right_e0',-0.1), jcf('left_s0', -0.1), jcf('left_e1', -0.1)],
      'j': [jcf('left_e1',+0.1), jcf('right_e1',+0.1), jcf('left_s1', +0.1), jcf('left_w0', +0.1)],
      'k': [jcf('left_e1',-0.1), jcf('right_e1',-0.1), jcf('left_s1', -0.1), jcf('left_w0', -0.1)],
      'u': [jcf('left_w1',+0.1), jcf('right_w1',+0.1), jcf('left_e0', +0.1), jcf('left_w1', +0.1)],
      'i': [jcf('left_w1',-0.1), jcf('right_w1',-0.1), jcf('left_e0', -0.1), jcf('left_w1', -0.1)],

      'r': [jcf('left_w2',+0.1), jcf('right_w2',+0.1), jcf('right_w2',+0.1), jcf('right_w2',-0.1)],
      'y': [jcf('left_w2',-0.1), jcf('right_w2',-0.1), jcf('left_w2', +0.1), jcf('left_w2', -0.1)],

      'o': [jcf('left_gripper', 1.0)],
      '0': [jcf('left_gripper', 0.0)],
      'q': [jcf('right_gripper', 1.0)],
      '1': [jcf('right_gripper', 0.0)],

      'g': [self.incmode],
      ';': [self.decmode],
      '?': [self.showHelp],
      '\x1b': [self.stop], #Escape... doesn't print.
    }

    self.showHelp()

  def stop(self):
    """ Esc: stop """
    self.done = True

  def createCommandFunction(self, jointName, delta):
    """create a function to increment a specific joint by a specific delta"""
    def commandFunction():
      try:
        self.controller.command({jointName: delta})
      except OSError:
        print "joint %s not found; is the robot running?" % (jointName)
    commandFunction.__doc__ = "modify " + jointName + " by " + str(delta)
    return commandFunction

  def getch(self):
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
      tty.setraw(sys.stdin.fileno())
      ch = sys.stdin.read(1)
    except:
      raise OSError
    finally:
      termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

  def incmode(self):
    """increment mode: switch key bindings"""
    self.mode += 1

  def decmode(self):
    """decrement mode: switch key bindings"""
    self.mode -= 1

  def showHelp(self):
    """show binding help"""
    print "============ bindings for current mode " + str(self.mode) + " =================="
    for key, cmds in sorted(self.bindings.items()):
      i = self.mode % len(cmds)
      print "    " + str(key) + ": " + str(cmds[i].__doc__)

  def execBinding(self,c):
    if c in self.bindings:
      cmds = self.bindings[c]
      i = self.mode % len(cmds)
      print cmds[i].__doc__
      cmds[i]()
    else:
      print "unknown key: " + c
      print "press '?' for help"

  def loop(self):
    self.done = False
    self.mode = 0
    while not self.done:
      c = self.getch()
      self.execBinding(c)

if __name__ == '__main__':
  print("Initializing node... ")
  rospy.init_node("rethink_rsdk_joint_pose_keyboard")
  print("Getting robot state... ")
  rs = enable_robot.RobotState()
  print("Enabling robot... ")
  rs.enable()

  mapper = KeyboardMapper(JointPositionBaxterController())

  mapper.loop()
  rs.disable()
